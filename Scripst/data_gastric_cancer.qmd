---
title: "gastric_cancer"
author: "junior"
format: 
   html:
     toc: true
     code-fold: show
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#|label: setup
#|iinclude: false

knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  fig.width = 7,
  fig.height = 5,
  fig.align = "center"
)
```

You can add options to executable code like this

```{r}
pacman::p_load(
  rio,
  here,
  reportfactory,
  rfextras,
  tidyverse,
  ggcorrplot,
  ggsci,
  ggpubr,
  ggbiplot,
  finalfit,
  gtsummary,
  flextable,
  ftExtra,
  broom,
  performance,
  lmtest,
  stats,
  moments,
  nortest,
  epiDisplay,
  car,
  Rtsne,
  factoextra,
  corrplot,
  grateful,
  patchwork,
  officer,
  janitor,
  knitr,
  dplyr,
  survival,
  ggplot2,
  tibble,
  officer,
  stringr
)
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
data_gastric_cancer <- import(here::here("data", "data_gastric_cancer.txt"))
dim(data_gastric_cancer)
```

```{r}
data_gc_1 <- data_gastric_cancer |>
  mutate(age = ff_label(age, "Age (years)"), ###

         age.c = case_when(age <= 64 ~ "< 65",
                            age > 64 ~ ">= 65") |>
           fct_relevel("< 65", ">= 65") |>
           ff_label("Age (years)"),

         sex = factor(sex) |> ###
           fct_recode("Female" = "female",
                      "Male" = "male") |>
           fct_relevel("Female", "Male") |>
           ff_label("Sex"),
         `microsatellite status` = factor(`microsatellite status`) |> ###
           fct_recode("MS-Stable" = "MS-Stable",
                      "MSI-High" = "MSI-High") |>
           fct_relevel("MS-Stable", "MSI-High") |>
           ff_label("Microsatellite status"),

         SES = factor(SES) |> ####
           fct_recode("High/medium" = "High/medium",
                      "Low" = "low") |>
           fct_relevel("High/medium", "Low") |>
           ff_label("SES"),

         `location of tumor` = factor(`location of tumor`) |> #
           fct_recode("Body- Antrum" = "Body- Antrum",
                      "Antrum" = "Antrum",
                      "Body" = "Body",
                      "Fundus" = "Fundus") |>
           fct_relevel("Body- Antrum",
                       "Antrum",
                       "Body",
                       "Fundus") |>
           ff_label("Location of tumor"),
         `Lauren classification` = factor(`Lauren classification`) |> #
           fct_recode("Mixed" = "Mixed",
                      "Intestinal" = "Intestinal",
                      "Diffuse" = "Diffuse") |>
           fct_relevel("Mixed",
                       "Intestinal",
                       "Diffuse") |>
           ff_label("Lauren classification"),
           
            `Borrmann classification` = factor(`Borrmann classification`)|>
            ff_label("Borrmann classification"),
         `Borrmann classification c` = factor(`Borrmann classification c`)|>
            ff_label("Borrmann classification c"),
         
                  `clinical stage` = factor(`clinical stage`)|>
           ff_label("Clinical stage"),
         `clinical stage c` = factor(`clinical stage c`)|>
           ff_label("Clinical stage c"),
         `tumor size` = ff_label(`tumor size`, "Tumor size (mm)"),
         albumin = ff_label(albumin, "Albumin (g/dL)"),
         hemoglobin = ff_label(hemoglobin, "Hemoglobin (g/dL)"),
         burden = ff_label(burden, "Tumor mutational burdem (Muts/Mb)")
  )
```

```{r}
## Case control def
data_gc_1 <- data_gc_1 |> mutate(
  cc = case_when(
  SES == "Low" ~ "case",
  SES == "High/medium" ~ "control")
)
```


```{r}
data_gc_2 <- data_gc_1 |>
  dplyr::select(
    # Demographics characteristics
    age, age.c, sex, 
    
    # Clinicopathological characteristics
    albumin, hemoglobin, `tumor size`, `Lauren classification`, 
    `Borrmann classification`, `Borrmann classification c`, `location of tumor`,
    `clinical stage`, `clinical stage c`,
    
    # Genomic characteristics
    `microsatellite status`, burden, 
    
    # Socioeconomic status
    SES
  )
```


# Produce outputs

## Table 1. Demographics and clinical characteristics of patients

```{r}
# Demographics characteristics and history
tbl_1.1 <- data_gc_2 |>
  tbl_summary(
    include = c(
      age:burden
    ),
    by = SES,
    percent = "column",
    digits = list(all_continuous() ~ c(1, 1))
  ) |>
  add_overall() |>
  add_p() |>
  bold_p(t = 0.05) |>
  modify_header(all_stat_cols() ~ "**{level}** (n = {n})",
                stat_0 = "**All patients** (n = {N})",
                #stat_1 = "**High/medium** (N = {N})",
                #stat_2 = "**Low** (N = {N})",
                p.value = "**p value**",
  ) |>
  modify_spanning_header(all_stat_cols(stat_0 = FALSE) ~ "**Socioeconomic status**") |>
  modify_caption("**Table 1**. Comparison of clinopathological characteristics between GC whith LSES and MHSES")
# Stack tables
  group_header = c(
    "Demographics characteristics",
    "clinopathological characteristics",
    "Genomic characteristics"
  )
  quiet = TRUE



# View
tbl_1.1
```

# Save outputs

```{r}
tbl_1.1 <- gtsummary::as_flex_table(tbl_1.1)
save_as_docx(
  tbl_1.1,
  align = "center",
  path = here("Outputs", "Table_1.1.docx"))
```


# Creating waterfall plot (Genomic)

## Installing and loading GenVisR

```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("GenVisR")

library(GenVisR)
```

```{r}
library(GenVisR)
library(data.table)
```

```{r}
# creation of the initial plot
mutationdatalow <- low[, c("ID", "gene", "change", "effect", "burden")]
setnames(mutationdatalow, c("sample", "gene", "amino.acid.change", "mutation", "mut_burden"))
colnames(mutationdatalow) <- c("sample", "gene", "amino.acid.change", "mutation", "mut_burden")

hierarchyDFlow <- data.frame("mutation"=c(mutlow_color$mutation), "color"=c(mutlow_color$color))

```

# Adding clinical data

```{r}
myClinical <- low[, c("ID", "Location of tumor", "Lauren classification", "Sex", "SES")]
colnames(myClinical) <- c("ID", "Location of tumor", "Lauren classification", "Sex", "SES")
setnames(myClinical, c("sample", "Location of tumor", "Lauren classification", "Sex", "SES"))
myClinical$sample <- gsub("^GC(20)+", "", myClinical$sample)

myClinicalColors <- c('Low'='#0F102E', 'High/medium'='#16689E', 'Male'='#DB1515', 'Female'='#D75D20', 
             'Intestinal'='#37982C', 'Diffuse'='#94B122', 'Mixed'='#F1C917', 'Fundus'='#14E9BE', 
             'Body'='#19A68A', 'Antrum'='#1F6457', 'Body-Antrum'='#242123')

clinicalData <- Clinical(inputData = myClinical, palette = myClinicalColors, legendColumns = 3)
```

# Adding a custom mutation burden

```{r}
burdenlow$sample <- gsub("^GC()+", "", burdenlow$sample)
mutation_burden  <- as.numeric(burdenlow$burden)
names(mutation_burden ) <- burdenlow$sample
```

# Create the waterfall plot

```{r}
plotData <- Waterfall(mutationdatalow, mutationHierarchy = hierarchyDFlow, clinical = clinicalData, coverage=mutation_burden, plotA = "frequency")

drawPlot(plotData)
```
